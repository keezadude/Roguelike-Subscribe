╔═══════════════════════════════════════════════════════════════════════════╗
║                    AUTOMATED TESTING SYSTEM ARCHITECTURE                  ║
╚═══════════════════════════════════════════════════════════════════════════╝

┌───────────────────────────────────────────────────────────────────────────┐
│                            USER INTERACTION                               │
└───────────────────────────────────────────────────────────────────────────┘

         ┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐
         │   F1    │  │   F2    │  │   F3    │  │   F4    │
         │ Debug   │  │  Quick  │  │ Single  │  │  Full   │
         │  View   │  │  Check  │  │  Test   │  │  Suite  │
         └────┬────┘  └────┬────┘  └────┬────┘  └────┬────┘
              │            │            │            │
              ▼            ▼            ▼            ▼
         ┌────────────────────────────────────────────────┐
         │        GameManager:keypressed(key)             │
         └────────────────────────────────────────────────┘
                                │
                                ▼
         ┌────────────────────────────────────────────────┐
         │      GameManager:initializeTestRunner()        │
         │      ↓                                         │
         │      Creates TestRunner instance               │
         └────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────────────┐
│                          TEST EXECUTION FLOW                              │
└───────────────────────────────────────────────────────────────────────────┘

    F3 Pressed
        │
        ▼
    ┌─────────────────────────────────────┐
    │ TestRunner:runTest()                │
    │   ├─ Initialize test                │
    │   ├─ Start monitoring               │
    │   └─ Set testMode = true            │
    └─────────────────┬───────────────────┘
                      │
                      ▼
    ┌─────────────────────────────────────┐
    │ VehiclePositionTest:startTest()     │
    │   ├─ Validate spawn position        │
    │   ├─ Initialize sample array        │
    │   └─ Start timer                    │
    └─────────────────┬───────────────────┘
                      │
                      ▼
    ┌─────────────────────────────────────┐
    │ Game Loop (every frame)             │
    │   │                                 │
    │   ├─ GameManager:update(dt)         │
    │   │    └─ TestRunner:update(dt)     │
    │   │         └─ Test:update(dt)      │
    │   │              ├─ samplePosition()│
    │   │              ├─ Check thresholds│
    │   │              └─ Record violations│
    │   │                                 │
    │   └─ GameManager:draw()             │
    │        └─ TestRunner:draw()         │
    │             └─ Test:draw()          │
    │                  └─ Show overlay    │
    └─────────────────┬───────────────────┘
                      │
                      │ After TEST_DURATION (10s)
                      ▼
    ┌─────────────────────────────────────┐
    │ VehiclePositionTest:endTest()       │
    │   ├─ Generate position trace        │
    │   ├─ Count violations               │
    │   ├─ Print report                   │
    │   └─ Set testMode = false           │
    └─────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────────────┐
│                        Y-AXIS VALIDATION LOGIC                            │
└───────────────────────────────────────────────────────────────────────────┘

                         Y-AXIS (pixels)
                              │
    -200 ─────────────────────┼─────────────────── Screen Top
                              │
    -100 ═════════════════════╬═════════════════ MIN_ACCEPTABLE_Y
                              │  ▲
                              │  │ Acceptable Range
                              │  │ (Vehicle can fly here)
                              │  │
       0 ─────────────────────┼──┘
                              │
                              │
     500 ═════════════════════╬═════════════════ EXPECTED_SPAWN_Y_MIN
                              │  ┌─ Spawn Zone ─┐
     630 ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┼  │ Vehicle spawns│
                              │  │   here (100,  │
     700 ═════════════════════╬══╪═══630)════════╪═ EXPECTED_SPAWN_Y_MAX
         ─────────────────────┼──┘ GROUND ───────┘  (also GROUND_Y)
                              │
     800 ═════════════════════╬═════════════════ MAX_ACCEPTABLE_Y
                              │  ▼
                              │  VIOLATION ZONE
     900 ─────────────────────┼─────────────────── (Fell through ground)
                              │
    1000 ─────────────────────┼─────────────────── Screen Bottom


┌───────────────────────────────────────────────────────────────────────────┐
│                          SAMPLE COLLECTION                                │
└───────────────────────────────────────────────────────────────────────────┘

    Time:  0.0s   0.1s   0.2s   0.3s   ...   10.0s
           │      │      │      │            │
           ▼      ▼      ▼      ▼            ▼
    ┌──────┬──────┬──────┬──────┬─────┬──────┐
    │Sample│Sample│Sample│Sample│ ... │Sample│
    │  1   │  2   │  3   │  4   │     │ 100  │
    └──┬───┴──┬───┴──┬───┴──┬───┴─────┴──┬───┘
       │      │      │      │            │
       ▼      ▼      ▼      ▼            ▼
    Each sample contains:
    - time (seconds since test start)
    - x position
    - y position  ◄── VALIDATED AGAINST THRESHOLDS
    - velocity (vx, vy)
    - speed (magnitude)


┌───────────────────────────────────────────────────────────────────────────┐
│                         VIOLATION DETECTION                               │
└───────────────────────────────────────────────────────────────────────────┘

    Every 0.1 seconds:
    
    ┌─────────────────────────────────┐
    │ Get vehicle position (x, y)     │
    └────────────┬────────────────────┘
                 │
                 ▼
    ┌─────────────────────────────────┐
    │ y > MAX_ACCEPTABLE_Y (800)?     │◄─── YES ──┐
    └────────────┬────────────────────┘           │
                 │ NO                             │
                 ▼                                 ▼
    ┌─────────────────────────────────┐    ┌──────────────────┐
    │ y < MIN_ACCEPTABLE_Y (-100)?    │◄─  │ Record Violation │
    └────────────┬────────────────────┘ │  │ - Type           │
                 │ NO                   │  │ - Message        │
                 ▼                      │  │ - Time           │
    ┌─────────────────────────────────┐│  │ - Position       │
    │ Y velocity > 5000 px/s?         ││  └──────────────────┘
    └────────────┬────────────────────┘│           │
                 │ NO                   │           │
                 ▼                      └─── YES ───┘
    ┌─────────────────────────────────┐
    │ Position valid, continue        │
    └─────────────────────────────────┘


┌───────────────────────────────────────────────────────────────────────────┐
│                            DATA FLOW                                      │
└───────────────────────────────────────────────────────────────────────────┘

    ┌─────────────┐
    │ GameManager │
    │             │
    │ .vehicle    │──────┐
    │ .testRunner │      │ References
    └──────┬──────┘      │
           │             │
           │ owns        │
           ▼             │
    ┌─────────────┐      │
    │ TestRunner  │      │
    │             │      │
    │ .tests{}    │      │
    └──────┬──────┘      │
           │             │
           │ owns        │
           ▼             │
    ┌──────────────────┐ │
    │ VehiclePosition  │ │
    │ Test             │ │
    │                  │◄┘ reads position from
    │ .samples[]       │
    │ .violations[]    │
    └──────────────────┘


┌───────────────────────────────────────────────────────────────────────────┐
│                          CONSOLE OUTPUT FLOW                              │
└───────────────────────────────────────────────────────────────────────────┘

    Test Start:
    ════════════════════════════════════════════════════════════════
    === Starting Vehicle Position Test: Manual Test ===
    📍 Initial spawn position: (100.0, 630.0)
    📏 Ground reference: Y = 700.0
    
    During Test:
    ────────────────────────────────────────────────────────────────
    [IF VIOLATION DETECTED]
    ❌ VIOLATION [FELL_THROUGH_GROUND]: Vehicle fell below ground:
       Y=815.3 at t=3.45s (max: 800.0)
    
    Test End:
    ════════════════════════════════════════════════════════════════
    === Test Complete: Manual Test [PASSED/FAILED] ===
    Duration: 10.00s
    Samples: 100
    Violations: 0
    
    📊 Position Trace (every 1s):
    Time(s) | X Position | Y Position | Speed
    --------|------------|------------|-------
       0.00 |      100.0 |      630.0 |    0.0
       1.00 |      245.3 |      645.2 |  156.3
       [...]


┌───────────────────────────────────────────────────────────────────────────┐
│                           FILE STRUCTURE                                  │
└───────────────────────────────────────────────────────────────────────────┘

    Roguelike & Subscribe/
    │
    ├── src/
    │   └── game/
    │       └── game-manager.lua ◄──── Modified (added test integration)
    │
    └── tests/  ◄──── NEW DIRECTORY
        ├── vehicle-position-test.lua  ◄──── Core test logic
        ├── test-runner.lua            ◄──── Test orchestration
        ├── example-usage.lua          ◄──── Code examples
        ├── README.md                  ◄──── Full documentation
        ├── QUICK_REFERENCE.txt        ◄──── Quick reference
        └── SYSTEM_DIAGRAM.txt         ◄──── This file


┌───────────────────────────────────────────────────────────────────────────┐
│                        INTEGRATION SUMMARY                                │
└───────────────────────────────────────────────────────────────────────────┘

    Zero Impact on Normal Gameplay:
    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    When NOT testing (normal gameplay):
    ✓ No performance overhead
    ✓ No memory allocation
    ✓ No code execution
    ✓ Test system remains dormant
    
    When testing (F2, F3, or F4 pressed):
    ✓ Minimal CPU usage (<1%)
    ✓ Small memory footprint (~1MB)
    ✓ No interference with game logic
    ✓ Visual overlay shows progress


┌───────────────────────────────────────────────────────────────────────────┐
│                          QUICK START GUIDE                                │
└───────────────────────────────────────────────────────────────────────────┘

    Step 1: Launch Game
    ────────────────────────────────────────────────────────────────
    > love.exe .
    
    Step 2: Start Run
    ────────────────────────────────────────────────────────────────
    Press SPACE at menu
    Press SPACE to launch
    
    Step 3: Run Test
    ────────────────────────────────────────────────────────────────
    Press F3
    
    Step 4: Observe
    ────────────────────────────────────────────────────────────────
    Watch console for violations
    See overlay for test status
    
    Step 5: Review Results
    ────────────────────────────────────────────────────────────────
    After 10 seconds, check console report
    ✅ PASSED = No Y-axis violations
    ❌ FAILED = Violations detected


╔═══════════════════════════════════════════════════════════════════════════╗
║  The automated testing system is now fully integrated and ready to use!  ║
║                                                                           ║
║  Press F3 in-game to start your first automated test!                    ║
╚═══════════════════════════════════════════════════════════════════════════╝
